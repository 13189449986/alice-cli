#!/usr/bin/env node
const program = require("commander");
const path = require("path");
const fs = require("fs");
const glob = require("glob");
const dowload = require("../lib/download");
const generator = require("../lib/generator");
const inquirer = require("inquirer");
const latestVersion = require("latest-version");
const chalk = require("chalk");
const logSymbols = require("log-symbols");
const templateConfig = require("../conf/template.json");
const configDefalut = require("../conf/index");
const spawn = require('child_process').spawn
const ora = require('ora')
program.usage("<project-name>").parse(process.argv);

// 根据输入，获取项目名称
let projectName = program.args[0];
if (!projectName) {
  // project-name 必填
  // 相当于执行命令的--help选项，显示help信息，这是commander内置的一个命令选项
  program.help();
  return;
}
let rootName = path.basename(process.cwd());
// 项目初始化
main();
/**
 * 主进程
 */
async function main() {
  try {
    console.log('检测版本')
    let isUpate = await checkVersion()
    console.log(isUpate)
    if (isUpate) await updateCli()
    console.log('创建路径')
    let projectRoot = await mkdir();
    let { git, templateValue } = await selectTemplate();
    await render(projectRoot, git, templateValue);
    afterBuild();
  } catch (err) {
    console.log(logSymbols.error, chalk.red(`创建失败：${err.message}`));
  }
}
/**
 * 检测版本
 */
function checkVersion () {
  return new Promise (async (resolve,reject) => {
    let webVersion = await latestVersion('61tpl-cli')
    let localVersion = require('../package.json').version
    console.log(`本地版本${localVersion}, 最新版本${webVersion}`)
    let webVersionArr = webVersion.split('.')
    let localVersionArr = localVersion.split('.')
    let isNew = webVersionArr.some((item,index) => {
      return (Number(item) > Number(localVersionArr[index]))
    })
    resolve(isNew)
  })
}
/**
 * 更新脚手架
 */
function updateCli () {
  return new Promise(async(resolve) => {
    const promptArr = configDefalut.updateNPMPrompt
    let { npmType } = await inquirer.prompt(promptArr)
     const spinner = ora(`更新61tpl-cli中`)
     let status
    switch (npmType) {
      case 'npm' : 
        spinner.start()
        status = spawn('npm.cmd', ['install','61tpl-cli','-g'])
        break;
      case 'cnpm' : 
        spinner.start()
        status = spawn('cnpm.cmd', ['install','61tpl-cli','-g'])
        break;
      case 'yarn' : 
        spinner.start()
        status = spawn('yarn.cmd', ['add','61tpl-cli','-g'])
        break;
    }
    status.stdout.on('data', (data) =>{
      console.log(data.toString());    
    });
    status.on('close', () => {
      spinner.succeed()
      console.log(logSymbols.success, chalk.green("更新成功:)"))
      resolve()
    })
  })
}
/**
 * 创建路径
 */
function mkdir() {
  return new Promise(async (resolve, reject) => {
    const list = glob.sync("*"); // 遍历当前目录
    if (list.length) {
      if (
        list.filter(name => {
          const fileName = path.resolve(process.cwd(), path.join(".", name));
          const isDir = fs.statSync(fileName).isDirectory();
          return name.indexOf(projectName) !== -1 && isDir;
        }).length !== 0
      ) {
        reject(`项目${projectName}已经存在`);
      }
      resolve(projectName);
    } else if (rootName === projectName) {
      let answer = await inquirer.prompt([
        {
          name: "buildInCurrent",
          message:
            "当前目录为空，且目录名称和项目名称相同，是否直接在当前目录下创建新项目",
          type: "confirm",
          default: true
        }
      ]);
      resolve(answer.buildInCurrent ? "." : projectName);
    } else {
      resolve(projectName);
    }
  });
}
/**
 * 模板选择
 */
function selectTemplate() {
  return new Promise((resolve, reject) => {
    let choices = Object.values(templateConfig).map(item => {
      return {
        name: item.name,
        value: item.value
      };
    });
    let config = {
      // type: 'checkbox',
      type: "list",
      message: "请选择创建项目类型",
      name: "select",
      choices: [new inquirer.Separator("模板类型"), ...choices],
    };
    inquirer.prompt(config).then(data => {
      let { select } = data;
      let { value, git } = templateConfig[select];
      resolve({
        git,
        templateValue: value
      });
    });
  });
}
/**
 * 渲染模板
 * @param projectRoot 文件路径
 * @param git 模板的git地址
 * @param templateValue 选中的模板类型
 */
function render(projectRoot, git, templateValue) {
  return new Promise(async (resolve, reject) => {
    try {
      if (projectRoot !== ".") {
        fs.mkdirSync(projectName);
      }
      let target = await dowload(rootName, git);
      console.log(logSymbols.success, chalk.green("模板下载完毕:)"));
      let context = {
        name: projectRoot,
        root: projectRoot,
        downloadTemp: target
      };
      const promptArr = configDefalut.getDefaultPrompt(context);
      promptArr.push(...templateConfig[templateValue].options);
      let answer = await inquirer.prompt(promptArr);
      let generatorParam = {
        metadata: {
          ...answer
        },
        src: context.downloadTemp,
        dest: context.root
      };
      await generator(generatorParam);
      resolve();
    } catch (err) {
      reject(err);
    }
  });
}
/**
 * 模板渲染后执行
 */
function afterBuild() {
  console.log(logSymbols.success, chalk.green("创建成功:)"));
  console.log("cd ./ && cnpm i");
}
