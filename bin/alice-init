#!/usr/bin/env node
const program = require('commander')
const path = require('path')
const fs = require('fs')
const glob = require('glob') 
const dowload = require('../lib/download')
const generator = require('../lib/generator')
const inquirer = require('inquirer')
const latestVersion = require('latest-version')
const chalk = require('chalk')
const logSymbols = require('log-symbols')
const child_process = require('child_process')
const ora = require('ora')
const templateConfig = require('../conf/template.json')
const configDefalut = require('../conf/index')
program
  .usage('<project-name>')
  .parse(process.argv)

// 根据输入，获取项目名称
let projectName = program.args[0]
if (!projectName) {  // project-name 必填
  // 相当于执行命令的--help选项，显示help信息，这是commander内置的一个命令选项
  program.help() 
  return
}
let rootName = path.basename(process.cwd())
function mkdir () {
  return new Promise((resolve, reject) => {
    const list = glob.sync('*')  // 遍历当前目录
    let next = undefined
    // let rootName = path.basename(process.cwd())
    if (list.length) {
      if (list.filter( name => {
        const fileName = path.resolve(process.cwd(), path.join('.', name))
        const isDir = fs.statSync(fileName).isDirectory()
        return name.indexOf(projectName) !== -1 && isDir
      }).length !== 0) {
        reject(`项目${projectName}已经存在`)
      }
      resolve(projectName)
    } else if (rootName === projectName) {
      next = inquirer.prompt([
        {
          name: 'buildInCurrent',
          message: "当前目录为空，且目录名称和项目名称相同，是否直接在当前目录下创建新项目",
          type: 'confirm',
          default: true,
        }
      ]).then(answer => {
        resolve(answer.buildInCurrent ? '.' : projectName)
      })
    } else {
      resolve(projectName)
    }
  })
}
// 当前目录为空，如果当前目录的名称和project-name一样，则直接在当前目录下创建工程，否则，在当前目录下创建以project-name作为名称的目录作为工程的根目录
// 当前目录不为空，如果目录中不存在与project-name同名的目录，则创建以project-name作为名称的目录作为工程的根目录，否则提示项目已经存在，结束命令执行。
// const list = glob.sync('*')  // 遍历当前目录
// let next = undefined
// let rootName = path.basename(process.cwd())
// if (list.length) {
//   if (list.filter( name => {
//     const fileName = path.resolve(process.cwd(), path.join('.', name))
//     const isDir = fs.statSync(fileName).isDirectory()
//     return name.indexOf(projectName) !== -1 && isDir
//   }).length !== 0) {
//     console.log(`项目${projectName}已经存在`)
//     return
//   }
//   next = Promise.resolve(projectName)
//   // rootName = projectName
// } else if (rootName === projectName) {
//   next = inquirer.prompt([
//     {
//       name: 'buildInCurrent',
//       message: "当前目录为空，且目录名称和项目名称相同，是否直接在当前目录下创建新项目",
//       type: 'confirm',
//       default: true,
//     }
//   ]).then(answer => {
//     return Promise.resolve(answer.buildInCurrent ? '.' : projectName)
//   })
// } else {
//   next = Promise.resolve(projectName)
// }
// next && go ()

async function init () {
  try {
    let projectRoot = await mkdir()
    await go(projectRoot)
    console.log(logSymbols.success, chalk.green('创建成功:)'))
  } catch (err) {
    console.log(logSymbols.error, chalk.red(`创建失败：${err.message}`))
  }
}
init()

function go (projectRoot) {
  return new Promise (async (resolve,reject) => {
    try {
      if (projectRoot !== '.') {
        fs.mkdirSync(projectName)
      }
      let target = await dowload(rootName)
      console.log(logSymbols.success, chalk.green('模板下载完毕:)'))
      let context = {
        name: projectRoot,
        root: projectRoot,
        downloadTemp: target
      }
      const promptArr = configDefalut.getDefaultPrompt(context)
      let answer = await  inquirer.prompt(promptArr)
      let generatorParam = {
        metadata: {
          ...answer
        },
        src: context.downloadTemp,
        dest: context.root
      }
      await generator(generatorParam)
      resolve()
    } catch (err) {
      reject(err)
    }
  })
  // next
  //   .then(projectRoot  => {
  //     if (projectRoot !== '.') {
  //       fs.mkdirSync(projectName)
  //     }
  //     // return dowload(rootName)
  //     return dowload(rootName)
  //       .then(target => {
  //         console.log('模板下载成功')
  //         return {
  //           name: projectRoot,
  //           root: projectRoot,
  //           downloadTemp: target
  //         }
  //       })
  //       .catch(err => {
  //         console.log(err)
  //       })
  //   })
  //   .then(context => {
  //     config = context
  //     return inquirer.prompt([
  //       {
  //         name: 'projectName',
  //         message: '项目的名称',
  //         default: context.name
  //       }, {
  //         name: 'projectVersion',
  //         message: '项目的版本号',
  //         default: '1.0.0'
  //       }, {
  //         name: 'projectDescription',
  //         message: '项目的简介',
  //         default: `A project named ${context.name}`
  //       }
  //     ])
  //   })
  //   .then(answers => {
  //     return {
  //       metadata: {
  //         ...answers
  //       },
  //       src: config.downloadTemp,
  //       dest: config.root
  //     }
  //   })
  //   .then(context => {
  //     // console.log(context)
  //     return generator(context)
  //   })
  //   .then(context => {
  //     const spinner = ora(`下载依赖中`)
  //     spinner.start()
  //     child_process.execSync(`cd ./${config.root} && cnpm i`)
  //     spinner.succeed()
  //     console.log(logSymbols.success, chalk.green('创建成功:)'))
  //   }).catch(error => {
  //     console.log(logSymbols.error, chalk.red(`创建失败：${error.message}`))
  //   })  
}
// function go () {
//   let config
//   next
//     .then(projectRoot  => {
//       if (projectRoot !== '.') {
//         fs.mkdirSync(projectName)
//       }
//       // return dowload(rootName)
//       return dowload(rootName)
//         .then(target => {
//           console.log('模板下载成功')
//           return {
//             name: projectRoot,
//             root: projectRoot,
//             downloadTemp: target
//           }
//         })
//         .catch(err => {
//           console.log(err)
//         })
//     })
//     .then(context => {
//       config = context
//       return inquirer.prompt([
//         {
//           name: 'projectName',
//           message: '项目的名称',
//           default: context.name
//         }, {
//           name: 'projectVersion',
//           message: '项目的版本号',
//           default: '1.0.0'
//         }, {
//           name: 'projectDescription',
//           message: '项目的简介',
//           default: `A project named ${context.name}`
//         }
//       ])
//     })
//     .then(answers => {
//       return {
//         metadata: {
//           ...answers
//         },
//         src: config.downloadTemp,
//         dest: config.root
//       }
//     })
//     .then(context => {
//       // console.log(context)
//       return generator(context)
//     })
//     .then(context => {
//       const spinner = ora(`下载依赖中`)
//       spinner.start()
//       child_process.execSync(`cd ./${config.root} && cnpm i`)
//       spinner.succeed()
//       console.log(logSymbols.success, chalk.green('创建成功:)'))
//     }).catch(error => {
//       console.log(logSymbols.error, chalk.red(`创建失败：${error.message}`))
//     })  
// }